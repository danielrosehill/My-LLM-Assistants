name: Update Index

on:
  push:
    paths:
      - 'finished/by-category/**.md'
    branches:
      - main

jobs:
  update-index:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: pip install openai
          
      - name: Generate Index
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python - <<EOF
          import os
          import re
          import openai
          from pathlib import Path
          
          START_MARKER = "<!-- index-start -->"
          END_MARKER = "<!-- index-end -->"
          
          def get_markdown_files():
              base_path = Path('finished/by-category')
              files = []
              for filepath in base_path.rglob('*.md'):
                  files.append(str(filepath))
              return sorted(files)
          
          def get_summary(content):
              openai.api_key = os.getenv('OPENAI_API_KEY')
              response = openai.ChatCompletion.create(
                  model="gpt-3.5-turbo",
                  messages=[
                      {"role": "system", "content": "Summarize the following text in exactly two lines."},
                      {"role": "user", "content": content}
                  ]
              )
              return response.choices[0].message['content']
          
          def extract_huggingface_url(content):
              patterns = [
                  r'huggingface\.co/[^\s\)]+',
                  r'hf\.co/[^\s\)]+',
                  r'huggingface:[^\s\)]+',
              ]
              for pattern in patterns:
                  match = re.search(pattern, content)
                  if match:
                      url = match.group(0)
                      if not url.startswith('http'):
                          url = 'https://' + url
                      return url
              return None
          
          def clean_title(filename):
              title = os.path.splitext(os.path.basename(filename))[0]
              return title.replace('-', ' ').title()
          
          def generate_table(files):
              table = "| Model | Description | Repository | HuggingFace |\n"
              table += "|--------|-------------|------------|-------------|\n"
              
              for file in files:
                  with open(file, 'r', encoding='utf-8') as f:
                      content = f.read()
                      
                  title = clean_title(file)
                  description = get_summary(content)
                  repo_link = f"[GitHub]({file})"
                  hf_url = extract_huggingface_url(content)
                  hf_link = f"[HuggingFace]({hf_url})" if hf_url else "N/A"
                  
                  description = description.replace('\n', '<br>')
                  table += f"| {title} | {description} | {repo_link} | {hf_link} |\n"
                  
              return table
          
          with open('README.md', 'r', encoding='utf-8') as f:
              readme = f.read()
          
          files = get_markdown_files()
          new_table = generate_table(files)
          
          if START_MARKER in readme and END_MARKER in readme:
              pattern = f"{START_MARKER}.*?{END_MARKER}"
              new_content = f"{START_MARKER}\n{new_table}\n{END_MARKER}"
              readme = re.sub(pattern, new_content, readme, flags=re.DOTALL)
          else:
              readme += f"\n\n{START_MARKER}\n{new_table}\n{END_MARKER}"
          
          with open('README.md', 'w', encoding='utf-8') as f:
              f.write(readme)
          EOF
          
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --quiet && git diff --staged --quiet || git commit -m "Update index"
          git push